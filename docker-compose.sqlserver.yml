services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: banking-sqlserver
    restart: unless-stopped
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: ${SA_PASSWORD:-SecurePassword123!}
      MSSQL_PID: ${MSSQL_PID:-Express}
      MSSQL_LCID: 1033
      MSSQL_COLLATION: SQL_Latin1_General_CP1_CI_AS
    volumes:
      - sqlserver_data:/var/opt/mssql/data
      - sqlserver_log:/var/opt/mssql/log
      - sqlserver_secrets:/var/opt/mssql/secrets
      - ./docker/sqlserver-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "1433:1433"
    networks:
      - banking-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${SA_PASSWORD:-SecurePassword123!} -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Flask Banking Application
  banking-app:
    build: .
    container_name: banking-app
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_TYPE: sqlserver
      DB_HOST: sqlserver
      DB_NAME: ${DB_NAME:-banking}
      DB_USER: ${DB_USER:-sa}
      DB_PASS: ${SA_PASSWORD:-SecurePassword123!}
      
      # Flask Configuration
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      FLASK_ENV: ${FLASK_ENV:-production}
      DEBUG: ${DEBUG:-False}
      
      # Security Configuration
      SESSION_COOKIE_SECURE: ${SESSION_COOKIE_SECURE:-True}
      LOCAL_TEST: ${LOCAL_TEST:-False}
      
      # Application Configuration
      BANK_NAME: ${BANK_NAME:-Kerata-Zemke}
    ports:
      - "5000:5000"
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - banking-network
    volumes:
      - ./logs:/app/logs:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Azure Data Studio web interface (alternative to SSMS)
  # Note: This is a simplified setup. In production, you'd use Azure Data Studio desktop app
  adminer:
    image: adminer:latest
    container_name: banking-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - sqlserver
    networks:
      - banking-network
    environment:
      ADMINER_DEFAULT_SERVER: sqlserver
      ADMINER_DESIGN: pepa-linha

volumes:
  sqlserver_data:
    driver: local
  sqlserver_log:
    driver: local
  sqlserver_secrets:
    driver: local

networks:
  banking-network:
    driver: bridge