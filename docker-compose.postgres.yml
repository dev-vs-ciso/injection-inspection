services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: banking-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-banking}
      POSTGRES_USER: ${DB_USER:-bankuser}
      POSTGRES_PASSWORD: ${DB_PASS:-securepassword123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - banking-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-bankuser} -d ${DB_NAME:-banking}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama LLM Service with TinyLlama
  ollama:
    build: ./docker/ollama/
    container_name: banking-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"  # Ollama API port
    networks:
      - banking-network
    volumes:
      - ollama_data:/root/.ollama  # Persist model data
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
      # TinyLlama optimizations
      - OLLAMA_NUM_PARALLEL=1
      - OLLAMA_MAX_LOADED_MODELS=1
      - OLLAMA_FLASH_ATTENTION=false
    # Increase memory limits for better performance
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      start_period: 120s  # Give time for model download
      retries: 3

  # Flask Banking Application
  banking-app:
    build: .
    container_name: banking-app
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_TYPE: postgresql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-banking}
      DB_USER: ${DB_USER:-bankuser}
      DB_PASS: ${DB_PASS:-securepassword123}
      
      # Flask Configuration
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      FLASK_ENV: ${FLASK_ENV:-production}
      DEBUG: ${DEBUG:-False}
      
      # Security Configuration
      SESSION_COOKIE_SECURE: ${SESSION_COOKIE_SECURE:-True}
      LOCAL_TEST: ${LOCAL_TEST:-False}
      
      # Application Configuration
      BANK_NAME: ${BANK_NAME:-Kerata-Zemke}

      # LLM Configuration
      LLM_SERVICE_URL: http://ollama:11434/api/generate
      LLM_MODEL: tinyllama
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - banking-network
    volumes:
      - ./logs:/app/logs:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: banking-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - banking-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

# EvilCorp - Attacker simulation server
  evilcorp-server:
    build: ./docker/evilcorp/
    container_name: evilcorp-server
    restart: unless-stopped
    ports:
      - "5555:5555"  # Netcat listener
      - "8888:8888"  # HTTP C&C server
    networks:
      - banking-network
    volumes:
      - evilcorp_data:/app/stolen_data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8888"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  evilcorp_data:
    driver: local
  ollama_data:
    driver: local
  
networks:
  banking-network:
    driver: bridge